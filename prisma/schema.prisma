// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  nombre            String
  apellido          String
  telefono          Int
  rol               Role
  usuario           String    @unique
  password          String
  vehiculosAsignados Vehicle[] @relation("VehicleEmployees")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}


model RegistrationRequest {
  id           String   @id @default(cuid())
  nombre       String
  apellido     String
  telefono     Int
  usuario      String   @unique
  password     String
  status       String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  TEST
  EMPLEADO
  PRACTICAS
  MECANICO
  APRENDIZ
  JEFE_MECANICO
}

model InventoryItem {
  id          String           @id @default(cuid())
  name        String
  category    String
  quantity    Int
  minQuantity Int
  alerts      InventoryAlert[] // Relación con las alertas
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model InventoryAlert {
  id          String       @id @default(cuid())
  itemId      String       // Relación con el inventario
  item        InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  message     String
  currentQty  Int           // Cantidad actual del inventario
  minQty      Int           // Cantidad mínima del inventario
  resolvedAt  DateTime?     // Fecha de resolución de la alerta
  createdAt   DateTime      @default(now())
}

model Vehicle {
  id            String   @id @default(cuid())
  propietario   String
  telefono      String
  marca         String
  modelo        String
  ano           Int
  cilindrada    Int
  combustible   String
  kilometraje   Int
  bastidor      String   @unique
  empleados     User[]   @relation("VehicleEmployees")
  comentarios   String?
  estado        String   @default("En reparación")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Distributor {
  id        String   @id @default(cuid())
  nombre    String
  telefono  String
  direccion String
  imagen    String?  // Almacena la imagen en formato Base64
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ClockIn {
  id         String   @id @default(cuid())
  usuario    String   // Almacena el nombre de usuario directamente
  clockIn    DateTime @default(now())
  clockOut   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Task {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  usuario   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GeneralAlert {
  id        String   @id @default(cuid())
  titulo    String
  mensaje   String
  activa    Boolean  @default(false)
  severity  Severity @default(INFO) // Nuevo campo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Severity {
  INFO
  WARNING
  CRITICAL
}

